import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class MQTTTemperatureREceiver {
    private MqttClient client;
    private final String broker = "tcp://test.mosquitto.org:1883"; // Broker aggiornato
    private final String topic = "IOT-Progetto-03-temp";
    private final BlockingQueue<Float> temperatureQueue = new LinkedBlockingQueue<>();

    public MQTTTemperatureREceiver() throws MqttException {
        String clientId = "JavaMqttClient-" + System.currentTimeMillis();

        client = new MqttClient(broker, clientId, new MemoryPersistence());
        MqttConnectOptions options = new MqttConnectOptions();
        options.setCleanSession(true);

        client.setCallback(new MqttCallback() {
            @Override
            public void connectionLost(Throwable cause) {
                System.out.println("Connessione persa: " + cause.getMessage());
            }

            @Override
            public void messageArrived(String topic, MqttMessage message) {
                try {
                    String strValue = new String(message.getPayload());
                    float temperature = Float.parseFloat(strValue);
                    temperatureQueue.add(temperature);
                    System.out.println("Temperatura ricevuta: " + temperature);
                } catch (NumberFormatException e) {
                    System.out.println("Messaggio non valido: " + new String(message.getPayload()));
                }
            }

            @Override
            public void deliveryComplete(IMqttDeliveryToken token) {
                // Non utilizzato per un subscriber
            }
        });

        client.connect(options);
        client.subscribe(topic, 0);
        System.out.println("Connesso a " + broker + " e sottoscritto al topic: " + topic);
    }

    public Float receiveTemperature(int timeoutSeconds) {
        try {
            return temperatureQueue.poll(timeoutSeconds, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return null;
        }
    }

    public void disconnect() {
        try {
            if (client != null && client.isConnected()) {
                client.disconnect();
                System.out.println("Disconnesso dal broker MQTT");
            }
        } catch (MqttException e) {
            System.err.println("Errore durante la disconnessione: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        try {
            MQTTTemperatureREceiver receiver = new MQTTTemperatureREceiver();

            System.out.println("In attesa di temperatura...");
            Float temp = receiver.receiveTemperature(30);

            if (temp != null) {
                System.out.println("Temperatura ricevuta: " + temp);
            } else {
                System.out.println("Timeout: nessuna temperatura ricevuta");
            }

            receiver.disconnect();

        } catch (MqttException e) {
            System.err.println("Errore MQTT: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
